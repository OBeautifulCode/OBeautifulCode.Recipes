// --------------------------------------------------------------------------------------------------------------------
// <copyright file="WireConsoleOutputToTestOutputHelperTestBase.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Testing source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Testing.Recipes
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Diagnostics.CodeAnalysis;
    using Xunit.Abstractions;
    
    /// <summary>
    /// Base class for a unit test class that wires <see cref="Console.Out"/> to the specified <see cref="ITestOutputHelper"/>.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.Testing.Recipes", "See package version number")]
    public class WireConsoleOutputToTestOutputHelperTestBase : IDisposable
    {
        private readonly ITestOutputHelper output;
        private readonly TextWriter originalOut;
        private readonly TextWriter textWriter;
        private bool isDisposed;

        /// <summary>
        /// Initializes a new instance of the <see cref="WireConsoleOutputToTestOutputHelperTestBase"/> class.
        /// </summary>
        /// <param name="output">The test output provider.</param>
        public WireConsoleOutputToTestOutputHelperTestBase(
            ITestOutputHelper output)
        {
            this.output = output;
            this.originalOut = Console.Out;
            this.textWriter = new StringWriter();

            Console.SetOut(this.textWriter);
        }

        /// <inheritdoc />
        public void Dispose()
        {
            this.Dispose(true);

            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Disposes the instance.
        /// </summary>
        /// <param name="disposing">Specifies whether this method is called directly or indirectly by user code.</param>
        protected virtual void Dispose(
            bool disposing)
        {
            if (this.isDisposed)
            {
                return;
            }

            if (disposing)
            {
                this.output.WriteLine(this.textWriter.ToString());

                Console.SetOut(this.originalOut);
            }

            this.isDisposed = true;
        }
    }
}